#!/usr/bin/env python3
"""
FileManager - Manages file creation for DailyPush commits
"""

import logging
from datetime import datetime
from pathlib import Path

logger = logging.getLogger(__name__)

class FileManager:
    def __init__(self, repo_path: Path):
        """
        Initialize FileManager
        
        Args:
            repo_path: Path to Git repository
        """
        self.repo_path = repo_path
        
    def create_daily_file(self, repo) -> str:
        """Create a file with timestamp for daily commit"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Check if it's the first commit
        try:
            commit_id = repo.head.commit.hexsha[:8]
            branch_name = repo.active_branch.name
            total_commits = len(list(repo.iter_commits()))
        except:
            # First commit
            commit_id = "FIRST"
            branch_name = "master"
            total_commits = 0
        
        content = f"""# Daily Update - {timestamp}

This is an automated commit generated by DailyPush.

## Daily Activity
- Timestamp: {timestamp}
- Commit ID: {commit_id}
- Branch: {branch_name}

## Statistics
- Total commits: {total_commits}
- Last update: {timestamp}

---
*Maintained by DailyPush - Keeping GitHub active! ðŸš€*
"""
        
        # Create directory for daily files if it doesn't exist
        daily_dir = self.repo_path / "daily_updates"
        daily_dir.mkdir(exist_ok=True)
        
        # File name based on date
        filename = daily_dir / f"update_{datetime.now().strftime('%Y%m%d')}.md"
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        
        logger.info(f"File created: {filename}")
        return str(filename)
